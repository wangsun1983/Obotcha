#ifndef __OBOTCHA_REFLECT_HPP__
#define __OBOTCHA_REFLECT_HPP__

#include <map>
#include <functional>
#include <sstream>  
#include <iostream> 

#define ARG_0(\
        N, ...) N

#define ARG_1(\
         _1,N, ...) N

#define ARG_2(\
         _1,_2,N, ...) N

#define ARG_3(\
         _1,_2,_3,N, ...) N

#define ARG_4(\
         _1,_2,_3,_4,N, ...) N

#define ARG_5(\
         _1,_2,_3,_4,_5,N, ...) N                  

#define ARG_6(\
         _1,_2,_3,_4,_5,_6,N, ...) N  

#define ARG_7(\
         _1,_2,_3,_4,_5,_6,_7,N, ...) N  

#define ARG_8(\
         _1,_2,_3,_4,_5,_6,_7,_8,N, ...) N  

#define ARG_9(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,N, ...) N  

#define ARG_10(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,_10,N, ...) N  

#define ARG_11(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,N, ...) N  

#define ARG_12(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,N, ...) N  

#define ARG_13(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,N, ...) N 

#define ARG_14(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,N, ...) N 

#define ARG_15(\
         _1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,N, ...) N 

#define RSEQ_N() \
         119,118,117,116,115,114,113,112,111,110,\
         109,108,107,106,105,104,103,102,101,100,\
         99,98,97,96,95,94,93,92,91,90, \
         89,88,87,86,85,84,83,82,81,80, \
         79,78,77,76,75,74,73,72,71,70, \
         69,68,67,66,65,64,63,62,61,60, \
         59,58,57,56,55,54,53,52,51,50, \
         49,48,47,46,45,44,43,42,41,40, \
         39,38,37,36,35,34,33,32,31,30, \
         29,28,27,26,25,24,23,22,21,20, \
         19,18,17,16,15,14,13,12,11,10, \
         9,8,7,6,5,4,3,2,1,0

#define ARG_N(\
         _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, \
         _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \
         _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, \
         _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, \
         _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, \
         _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, \
         _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, \
         _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, \
         _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, \
         _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, \
         _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, \
         _111, _112, _113, _114, _115, _116, _117, _118, _119, N, ...) N

#define MARCO_EXPAND(...)                 __VA_ARGS__
#define GET_ARG_COUNT_INNER(...)    MARCO_EXPAND(ARG_N(__VA_ARGS__))
#define GET_ARG_COUNT(...)          GET_ARG_COUNT_INNER(__VA_ARGS__, RSEQ_N())

#define DO_IMPLE_SET_VALUE(CLASS, ...) \
    IMPLE_SET_VALUE_INTERFACE(CLASS,GET_ARG_COUNT(__VA_ARGS__),__VA_ARGS__)

#define IMPLE_SET_VALUE_INTERFACE_1(CLASS,COUNT,...) IMPLE_SET_VALUE_1_INTERFACE_INTER(CLASS,COUNT,__VA_ARGS__)
#define IMPLE_SET_VALUE_1_INTERFACE_INTER(CLASS,COUNT, ...) 

#define IMPLE_SET_VALUE_INTERFACE_2(CLASS,COUNT,MEMBER, ...) IMPLE_SET_VALUE_2_INTERFACE_INTER(CLASS,COUNT,MEMBER,__VA_ARGS__)
#define IMPLE_SET_VALUE_2_INTERFACE_INTER(CLASS,COUNT,MEMBER, ...) IMPLE_SET_VALUE_2_INTERFACE_INTER2(CLASS,COUNT,MEMBER,__VA_ARGS__)
#define IMPLE_SET_VALUE_2_INTERFACE_INTER2(CLASS,COUNT,MEMBER, ...) IMPLE_SET_VALUE(CLASS,COUNT,MEMBER,__VA_ARGS__)

#define IMPLE_SET_VALUE_INTERFACE(CLASS,COUNT,MEMBER, ...) IMPLE_SET_VALUE_INTERFACE_INTER(CLASS,COUNT,MEMBER,__VA_ARGS__)
#define IMPLE_SET_VALUE_INTERFACE_INTER(CLASS,COUNT,MEMBER, ...) IMPLE_SET_VALUE_INTERFACE_INTER2(CLASS,COUNT,MEMBER,__VA_ARGS__)
#define IMPLE_SET_VALUE_INTERFACE_INTER2(CLASS,COUNT,MEMBER, ...) IMPLE_SET_VALUE(CLASS,COUNT,MEMBER,__VA_ARGS__)


//function
#define IMPLE_SET_VALUE_1(CLASS,MEMBER) \
    void __ReflectSet##MEMBER(std::string v) { \
        std::stringstream iss(v);\
        iss>>this->MEMBER;\
    }

#define IMPLE_SET_VALUE_2(CLASS,M1,M2) \
    IMPLE_SET_VALUE_1(CLASS,M1) \
    IMPLE_SET_VALUE_1(CLASS,M2)

#define IMPLE_SET_VALUE_3(CLASS,M1,M2,M3) \
    IMPLE_SET_VALUE_2(CLASS,M1,M2) \
    IMPLE_SET_VALUE_1(CLASS,M3)

#define IMPLE_SET_VALUE_4(CLASS,M1,M2,M3,M4) \
    IMPLE_SET_VALUE_3(CLASS,M1,M2,M3) \
    IMPLE_SET_VALUE_1(CLASS,M4)

#define IMPLE_SET_VALUE_5(CLASS,M1,M2,M3,M4,M5) \
    IMPLE_SET_VALUE_4(CLASS,M1,M2,M3,M4) \
    IMPLE_SET_VALUE_1(CLASS,M5)    

#define IMPLE_SET_VALUE_6(CLASS,M1,M2,M3,M4,M5,M6) \
    IMPLE_SET_VALUE_5(CLASS,M1,M2,M3,M4,M5) \
    IMPLE_SET_VALUE_1(CLASS,M6) 

#define IMPLE_SET_VALUE_7(CLASS,M1,M2,M3,M4,M5,M6,M7) \
    IMPLE_SET_VALUE_6(CLASS,M1,M2,M3,M4,M5,M6) \
    IMPLE_SET_VALUE_1(CLASS,M7)

#define IMPLE_SET_VALUE_8(CLASS,M1,M2,M3,M4,M5,M6,M7,M8) \
    IMPLE_SET_VALUE_7(CLASS,M1,M2,M3,M4,M5,M6,M7) \
    IMPLE_SET_VALUE_1(CLASS,M8)

#define IMPLE_SET_VALUE_9(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9) \
    IMPLE_SET_VALUE_8(CLASS,M1,M2,M3,M4,M5,M6,M7,M8) \
    IMPLE_SET_VALUE_1(CLASS,M9)

#define IMPLE_SET_VALUE_10(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10) \
    IMPLE_SET_VALUE_9(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9) \
    IMPLE_SET_VALUE_1(CLASS,M10)

#define IMPLE_SET_VALUE_11(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11) \
    IMPLE_SET_VALUE_10(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10) \
    IMPLE_SET_VALUE_1(CLASS,M11)

#define IMPLE_SET_VALUE_12(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12) \
    IMPLE_SET_VALUE_11(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11) \
    IMPLE_SET_VALUE_1(CLASS,M12)

#define IMPLE_SET_VALUE_13(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13) \
    IMPLE_SET_VALUE_12(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12) \
    IMPLE_SET_VALUE_1(CLASS,M13)

#define IMPLE_SET_VALUE_14(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14) \
    IMPLE_SET_VALUE_13(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13) \
    IMPLE_SET_VALUE_1(CLASS,M14)

#define IMPLE_SET_VALUE_15(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15) \
    IMPLE_SET_VALUE_14(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14) \
    IMPLE_SET_VALUE_1(CLASS,M15)
        
//init
#define IMPLE_INIT_FUNCTION_1(CLASS,MEMBER) \
    {\
        std::function<void(std::string)> obj = std::bind(&CLASS::__ReflectSet##MEMBER,this,std::placeholders::_1);\
        mSetMaps[#MEMBER] = obj;\
    }
    
#define IMPLE_INIT_FUNCTION_2(CLASS,M1,M2) \
    IMPLE_INIT_FUNCTION_1(CLASS,M1) \
    IMPLE_INIT_FUNCTION_1(CLASS,M2) 

#define IMPLE_INIT_FUNCTION_3(CLASS,M1,M2,M3) \
    IMPLE_INIT_FUNCTION_2(CLASS,M1,M2) \
    IMPLE_INIT_FUNCTION_1(CLASS,M3)

#define IMPLE_INIT_FUNCTION_4(CLASS,M1,M2,M3,M4) \
    IMPLE_INIT_FUNCTION_3(CLASS,M1,M2,M3) \
    IMPLE_INIT_FUNCTION_1(CLASS,M4)

#define IMPLE_INIT_FUNCTION_5(CLASS,M1,M2,M3,M4,M5) \
    IMPLE_INIT_FUNCTION_4(CLASS,M1,M2,M3,M4) \
    IMPLE_INIT_FUNCTION_1(CLASS,M5)

#define IMPLE_INIT_FUNCTION_6(CLASS,M1,M2,M3,M4,M5,M6) \
    IMPLE_INIT_FUNCTION_5(CLASS,M1,M2,M3,M4,M5) \
    IMPLE_INIT_FUNCTION_1(CLASS,M6)

#define IMPLE_INIT_FUNCTION_7(CLASS,M1,M2,M3,M4,M5,M6,M7) \
    IMPLE_INIT_FUNCTION_6(CLASS,M1,M2,M3,M4,M5,M6) \
    IMPLE_INIT_FUNCTION_1(CLASS,M7)

#define IMPLE_INIT_FUNCTION_8(CLASS,M1,M2,M3,M4,M5,M6,M7,M8) \
    IMPLE_INIT_FUNCTION_7(CLASS,M1,M2,M3,M4,M5,M6,M7) \
    IMPLE_INIT_FUNCTION_1(CLASS,M8)

#define IMPLE_INIT_FUNCTION_9(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9) \
    IMPLE_INIT_FUNCTION_8(CLASS,M1,M2,M3,M4,M5,M6,M7,M8) \
    IMPLE_INIT_FUNCTION_1(CLASS,M9)

#define IMPLE_INIT_FUNCTION_10(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10) \
    IMPLE_INIT_FUNCTION_9(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9) \
    IMPLE_INIT_FUNCTION_1(CLASS,M10)

#define IMPLE_INIT_FUNCTION_11(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11) \
    IMPLE_INIT_FUNCTION_10(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10) \
    IMPLE_INIT_FUNCTION_1(CLASS,M11)

#define IMPLE_INIT_FUNCTION_12(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12) \
    IMPLE_INIT_FUNCTION_11(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11) \
    IMPLE_INIT_FUNCTION_1(CLASS,M12)

#define IMPLE_INIT_FUNCTION_13(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13) \
    IMPLE_INIT_FUNCTION_12(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12) \
    IMPLE_INIT_FUNCTION_1(CLASS,M13)

#define IMPLE_INIT_FUNCTION_14(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14) \
    IMPLE_INIT_FUNCTION_13(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13) \
    IMPLE_INIT_FUNCTION_1(CLASS,M14)

#define IMPLE_INIT_FUNCTION_15(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15) \
    IMPLE_INIT_FUNCTION_14(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14) \
    IMPLE_INIT_FUNCTION_1(CLASS,M15)

#define IMPLE_INIT_FUNCTION_16(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16) \
    IMPLE_INIT_FUNCTION_15(CLASS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15) \
    IMPLE_INIT_FUNCTION_1(CLASS,M16)

#define IMPLE_INIT_FUNCTION_DETECT(CLASS,COUNT, ...) IMPLE_INIT_FUNCTION_DETECT_TRACE(CLASS,COUNT, __VA_ARGS__)
#define IMPLE_INIT_FUNCTION_DETECT_TRACE(CLASS,COUNT, ...) IMPLE_INIT_FUNCTION_DETECT_TRACE1(CLASS,COUNT, __VA_ARGS__)
#define IMPLE_INIT_FUNCTION_DETECT_TRACE1(CLASS,COUNT, ...) IMPLE_INIT_FUNCTION_##COUNT(CLASS,__VA_ARGS__)


#define IMPLE_SET_FUNCTION_DETECT(CLASS,COUNT, ...) IMPLE_SET_FUNCTION_DETECT_TRACE(CLASS,COUNT, __VA_ARGS__)
#define IMPLE_SET_FUNCTION_DETECT_TRACE(CLASS,COUNT, ...) IMPLE_SET_FUNCTION_DETECT_TRACE1(CLASS,COUNT, __VA_ARGS__)
#define IMPLE_SET_FUNCTION_DETECT_TRACE1(CLASS,COUNT, ...) IMPLE_SET_VALUE_##COUNT(CLASS,__VA_ARGS__)

   
#define DECLARE_REFLECT_FIELD(CLASS, ...) \
    std::map<std::string,std::function<void(std::string) >> mSetMaps;\
    IMPLE_SET_FUNCTION_DETECT(CLASS,GET_ARG_COUNT(__VA_ARGS__),__VA_ARGS__) \
    void __ReflectInit() {\
        IMPLE_INIT_FUNCTION_DETECT(CLASS,GET_ARG_COUNT(__VA_ARGS__),__VA_ARGS__)\
    }\
    void setFieldValue(String field,String value) {\
        mSetMaps[field->getStdString()](value->getStdString());\
    }\

    #endif